<!DOCTYPE html>
<html>
<head>
    <title>Job Monitor</title>

    <style>
        .job {
          background-color: #AF4C4C; 
          color: #FFFFFF;
          width: 100%;
          font-family: monospace;
          font-size: 15pt;
          padding: 10px 30px 10px 30px;
          border-radius: 10px 10px 10px 10px;
        }
    </style>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const socket = io(`http://${'<%= socketAddress %>'}:${'<%= socketPort %>'}`);

            socket.on('connect', () => {
                console.log('Connected to Socket.IO server');
            });

            socket.on('disconnect', () => {
                console.log('Disconnected from Socket.IO server');
            });

            socket.on('jobStatusUpdate', (status) => {
                console.log('Received jobStatusUpdate:', status);

                // Update the page with the received job status
                updateJobTable(status);
            });

            function updateJobTable(status) {
                const jobContainer = document.querySelector('#jobs');

                // Check if a span with the matching id already exists
                let job = document.getElementById(status.generationId);

                // remove job from list when completed
                if (status.done){
                    jobContainer.removeChild(job);
                }

                if (job) {
                    // Update the existing span's content
                    let eta = {
                        minutes: Math.floor(status.wait_time / 60),
                        seconds: status.wait_time % 60
                    };

                    job.textContent = `   | Position: ${status.queue_position} | ETA: ${eta.minutes}:${eta.seconds}`;
                } else {
                    // Create a new span if it doesn't exist
                    job = document.createElement('span');
                    job.id = status.generationId;
                    job.className = 'job';

                    let eta = {
                        minutes: Math.floor(status.wait_time / 60),
                        seconds: status.wait_time % 60
                    };

                    job.textContent = ` ${status.requestor} | Position: ${status.queue_position} | ETA: ${eta.minutes}:${eta.seconds}`;

                    jobContainer.appendChild(job);
                }
            }
        });
    </script>
</head>
<body>
    <h1>Active Jobs</h1>
    <div id="jobs">
        <!-- Jobs will be added here dynamically -->
    </div>
</body>
</html>