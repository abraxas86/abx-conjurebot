<!DOCTYPE html>
<html>
<head>
    <title>Job Monitor</title>
    <style>
        #jobs {
            display: flex;
            flex-direction: column;
            gap: 5px;
            position: relative;
        }

        .job {
            background: linear-gradient(to bottom, rgba(175, 76, 76, 0.8), rgba(75, 26, 26, 1) 50%, rgba(33, 14, 14, 1));
            color: #FFFFFF;
            width: 90%;
            border: 2px #000000 solid;
            font-family: monospace;
            font-size: 15pt;
            padding: 10px 30px;
            border-radius: 10px;
            position: relative;
            transition: transform 0.5s ease, opacity 0.5s ease;
            opacity: 0; /* Initially hidden */
            transform: translateX(-100%); /* Start position for slide-in animation */
            white-space: nowrap;
        }

        .job.show {
            transform: translateX(0); /* Slide into position */
            opacity: 1; /* Fade in */
        }

        .job.hide {
            opacity: 0; /* Fade out */
            transform: translateX(-100%); /* Slide out */
        }
    </style>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const socket = io(`http://${'<%= socketAddress %>'}:${'<%= socketPort %>'}`);

            socket.on('connect', () => {
                console.log('Connected to Socket.IO server');
            });

            socket.on('disconnect', () => {
                console.log('Disconnected from Socket.IO server');
            });

            socket.on('jobStatusUpdate', (status) => {
                //console.log('Received jobStatusUpdate:', status);
                updateJobTable(status);
            });

            function formatNumber(number) {
                return String(number).padStart(2, '0');
            }

            function updateJobTable(status) {
                const jobContainer = document.querySelector('#jobs');
                let job = document.getElementById(status.generationId);

                if (status.done) {
                    if (job) {
                        // Smoothly hide and remove the job when done
                        job.classList.add('hide');
                        job.addEventListener('transitionend', () => {
                            if (job.classList.contains('hide')) {
                                jobContainer.removeChild(job);
                                sortJobs(); // Re-sort after removal
                            }
                        });
                    }
                } else {
                    if (job) {
                        // Update existing job information
                        let eta = Math.floor(status.wait_time / 60) * 60 + (status.wait_time % 60);
                        job.dataset.eta = eta;

                        if (isNaN(eta)) {
                            job.classList.add('hide');
                            job.addEventListener('transitionend', () => {
                                if (job.classList.contains('hide')) {
                                    jobContainer.removeChild(job);
                                }
                            });
                            return;
                        }

                        job.textContent = ` ${status.requestor} | Position: ${formatNumber(status.queue_position)} | ETA: ${formatNumber(Math.floor(status.wait_time / 60))}:${formatNumber(status.wait_time % 60)} | ${status.prompt}`;
                        job.classList.remove('hide');
                        job.classList.add('show');
                    } else {
                        // Create new job if it doesn't exist
                        job = document.createElement('span');
                        job.id = status.generationId;
                        job.className = 'job';
                        
                        let eta = Math.floor(status.wait_time / 60) * 60 + (status.wait_time % 60);
                        job.dataset.eta = eta;

                        if (isNaN(eta)) {
                            return;
                        }

                        job.textContent = ` ${status.requestor} | Position: ${formatNumber(status.queue_position)} | ETA: ${formatNumber(Math.floor(status.wait_time / 60))}:${formatNumber(status.wait_time % 60)} | ${status.prompt}`;
                        jobContainer.appendChild(job);

                        // Trigger slide-in animation
                        requestAnimationFrame(() => {
                            job.classList.add('show');
                        });
                    }
                }

                // Sort jobs by ETA
                sortJobs();
            }

            function sortJobs() {
                const jobContainer = document.querySelector('#jobs');
                const jobs = Array.from(jobContainer.querySelectorAll('.job'));

                // Sort jobs by ETA
                jobs.sort((a, b) => a.dataset.eta - b.dataset.eta);

                // Re-append jobs in sorted order
                jobs.forEach(job => {
                    jobContainer.appendChild(job);
                });

                function fillGaps() {
                    const jobContainer = document.querySelector('#jobs');
                    const jobs = Array.from(jobContainer.querySelectorAll('.job'));

                    // Remove any gaps by re-adding jobs in the correct order
                    jobs.forEach(job => {
                        if (job.classList.contains('hide')) {
                            jobContainer.removeChild(job);
                        }
                    });

                    // Sort jobs by ETA and re-append them
                    sortJobs();
                }

                // Call fillGaps every 2 seconds
                setInterval(fillGaps, 2000);
            }
        });
    </script>
</head>
<body>
    <div id="jobs"></div>
</body>
</html>
